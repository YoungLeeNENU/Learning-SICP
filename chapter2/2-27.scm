;; SICP Practice: 2-27
(define (deep-reverse items)
  (define (atom-list? items)
	(if (not (list? items))
		(error "Parameter is not a list: " items)
		(if (null? items)
			#t
			(if (list? (car items))
				#f
				(atom-list? (cdr items))))))
  (cond ((not (pair? items)) (append items))
		((and (pair? items) (not (list? items))) (append items))
		((atom-list? items) (append (list-reverse items)))
		(else (append (list (deep-reverse (car (list-reverse items))))
					  (deep-reverse (cdr (list-reverse items)))))))

(define (list-reverse sample)
  (define (last-pair sample)
	(if (null? (cdr sample))
		sample
		(last-pair (cdr sample))))
  (define (drop-last sample)
	(if (null? (cdr sample))
		'()
		(cons (car sample) (drop-last (cdr sample)))))
  (define (reverse-iter sample index)
	(if (= index 0)
		'()
		(append (last-pair sample)
				(reverse-iter (drop-last sample) (- index 1)))))
  (reverse-iter sample (length sample)))

(begin
  (display '((1 2) (3 . 4)))
  (newline)
  (display (list-reverse '((1 2) (3 . 4))))
  (newline)
  (display (deep-reverse '((1 2) (3 . 4))))
  (newline)
  (display '(1 (2 3 4) 5 (6 7)))
  (newline)
  (display (list-reverse '(1 (2 3 4) 5 (6 7))))
  (newline)  
  (display (deep-reverse '(1 (2 3 4) 5 (6 7))))
  (newline))
