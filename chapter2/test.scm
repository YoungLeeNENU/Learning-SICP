(define (deep-reverse items)
  (define (atom-list? items)
	(if (not (list? items))
		(error "Parameter is not a list: " items)
		(if (null? items)
			#t
			(if (list? (car items))
				#f
				(atom-list? (cdr items))))))  
  (map (lambda (sub-items)
		 (cond ((not (pair? sub-items)) sub-items)
			   ((and (pair? sub-items) (not (list? sub-items))) sub-items)
			   ((atom-list? sub-items) (list-reverse sub-items))
			   (else (deep-reverse sub-items))))
	   (list-reverse items)))

(define (list-reverse sample)
  (define (last-pair sample)
	(if (null? (cdr sample))
		sample
		(last-pair (cdr sample))))
  (define (drop-last sample)
	(if (null? (cdr sample))
		'()
		(cons (car sample) (drop-last (cdr sample)))))
  (define (reverse-iter sample index)
	(if (= index 0)
		'()
		(append (last-pair sample)
				(reverse-iter (drop-last sample) (- index 1)))))
  (reverse-iter sample (length sample)))

(begin
  (display '((1 2) (3 . 4)))
  (newline)
  (display (list-reverse '((1 2) (3 . 4))))
  (newline)
  (display (deep-reverse '((1 2) (3 . 4))))
  (newline)
  (display '(1 (2 (3 4)) 5 (6 7)))
  (newline)
  (display (list-reverse '(1 (2 (3 4)) 5 (6 7))))
  (newline)
  (display (deep-reverse '(1 (2 (3 4)) 5 (6 7))))
  (newline))
