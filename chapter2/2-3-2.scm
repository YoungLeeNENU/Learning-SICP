#!/usr/bin/guile -s
!#
;; 矩形的表示
(define (make-segment point1 point2)
  (cons point1 point2))
(define (make-point x y)
  (cons x y))
(define (start-segment x)
  (car x))
(define (end-segment x)
  (cdr x))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (length segment)
  (define (square x)
	(* x x))
  (define (sqrt x)
	(define (good-enough? guess x)
	  (< (abs (- ((lambda (x) (* x x))
				  guess) x)) 0.001))
	(define (improve guess x)
	  (define (average x y)
		(/ (+ x y) 2))
	  (average guess (/ x guess)))
	(define (sqrt-iter guess x)
	  (if (good-enough? guess x)
		  guess
		  (sqrt-iter (improve guess x) x)))
	(sqrt-iter 1.0 x))
  (sqrt (+ (square (- (x-point (start-segment segment))
					  (x-point (end-segment segment))))
		   (square (- (y-point (start-segment segment))
					  (y-point (end-segment segment)))))))
(define (make-rectangle x1 y1 x2 y2 x3 y3 x4 y4)
  ;; (if (check-rectangle x1 y1 x2 y2 x3 y3 x4 y4)
  ;; 	  (error "This is not a rectangle.")
  ;; 	  ())
  (cons (length (make-segment (make-point x1 y1)
							  (make-point x2 y2)))
		(length (make-segment (make-point x1 y1)
							  (make-point x3 y3)))))
(define (area rectangle)
  (* (car rectangle)
	 (cdr rectangle)))
(define (perimeter rectangle)
  (* (+ (car rectangle) (cdr rectangle))
	 2))
(begin
  (display (area (make-rectangle 0 0 0 2 4 2 4 0)))
  (newline)
  (display (perimeter (make-rectangle 0 0 0 2 4 2 4 0)))
  (newline))
